{"version":3,"sources":["../../src/models/User.js"],"names":["Schema","mongoose","userSchema","provider","type","String","required","username","lowercase","unique","match","index","email","password","trim","minlength","maxlength","name","avatar","role","default","bio","googleId","sparse","facebookId","messages","Types","ObjectId","ref","entries","timestamps","console","log","__dirname","process","env","IMAGES_FOLDER_PATH","methods","toJSON","absoluteAvatarFilePath","fs","existsSync","id","_id","createdAt","updatedAt","isProduction","NODE_ENV","secretOrKey","JWT_SECRET_PROD","JWT_SECRET_DEV","generateJWT","token","jwt","sign","expiresIn","registerUser","newUser","callback","bcrypt","genSalt","err","salt","hash","errh","save","comparePassword","candidatePassword","compare","isMatch","hashPassword","saltRounds","hashedPassword","Promise","resolve","reject","validateUser","user","schema","Joi","any","string","min","max","regex","allow","validate","User","model"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport { join } from 'path';\nimport mongoose from 'mongoose';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport Joi from 'joi';\nimport { isValidUrl } from '../utils/utils';\n\nconst { Schema } = mongoose;\n\nconst userSchema = new Schema(\n  {\n    provider: {\n      type: String,\n      required: true,\n    },\n    username: {\n      type: String,\n      lowercase: true,\n      unique: true,\n      required: [true, \"can't be blank\"],\n      match: [/^[a-zA-Z0-9_]+$/, 'is invalid'],\n      index: true,\n    },\n    email: {\n      type: String,\n      lowercase: true,\n      unique: true,\n      required: [true, \"can't be blank\"],\n      match: [/\\S+@\\S+\\.\\S+/, 'is invalid'],\n      index: true,\n    },\n    password: {\n      type: String,\n      trim: true,\n      minlength: 6,\n      maxlength: 60,\n    },\n    name: String,\n    avatar: String,\n    role: { type: String, default: 'USER' },\n    bio: String,\n    // google\n    googleId: {\n      type: String,\n      unique: true,\n      sparse: true,\n    },\n    // fb\n    facebookId: {\n      type: String,\n      unique: true,\n      sparse: true,\n    },\n    messages: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Message' }],\n    entries: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Entry' }],\n  },\n  { timestamps: true },\n);\n\nconsole.log(join(__dirname, '../..', process.env.IMAGES_FOLDER_PATH));\n\nuserSchema.methods.toJSON = function () {\n  // if not exists avatar1 default\n  const absoluteAvatarFilePath = `${join(__dirname, '../..', process.env.IMAGES_FOLDER_PATH)}${this.avatar}`;\n  const avatar = isValidUrl(this.avatar)\n    ? this.avatar\n    : fs.existsSync(absoluteAvatarFilePath)\n    ? `${process.env.IMAGES_FOLDER_PATH}${this.avatar}`\n    : `${process.env.IMAGES_FOLDER_PATH}avatar2.jpg`;\n\n  return {\n    id: this._id,\n    provider: this.provider,\n    email: this.email,\n    username: this.username,\n    avatar: avatar,\n    name: this.name,\n    role: this.role,\n    createdAt: this.createdAt,\n    updatedAt: this.updatedAt,\n  };\n};\n\nconst isProduction = process.env.NODE_ENV === 'production';\nconst secretOrKey = isProduction ? process.env.JWT_SECRET_PROD : process.env.JWT_SECRET_DEV;\n\nuserSchema.methods.generateJWT = function () {\n  const token = jwt.sign(\n    {\n      expiresIn: '12h',\n      id: this._id,\n      provider: this.provider,\n      email: this.email,\n    },\n    secretOrKey,\n  );\n  return token;\n};\n\nuserSchema.methods.registerUser = (newUser, callback) => {\n  bcrypt.genSalt(10, (err, salt) => {\n    bcrypt.hash(newUser.password, salt, (errh, hash) => {\n      if (err) {\n        console.log(err);\n      }\n      // set pasword to hash\n      newUser.password = hash;\n      newUser.save(callback);\n    });\n  });\n};\n\nuserSchema.methods.comparePassword = function (candidatePassword, callback) {\n  bcrypt.compare(candidatePassword, this.password, (err, isMatch) => {\n    if (err) return callback(err);\n    callback(null, isMatch);\n  });\n};\n\n// const delay = (t, ...vs) => new Promise(r => setTimeout(r, t, ...vs)) or util.promisify(setTimeout)\n\nexport async function hashPassword(password) {\n  const saltRounds = 10;\n\n  const hashedPassword = await new Promise((resolve, reject) => {\n    bcrypt.hash(password, saltRounds, function (err, hash) {\n      if (err) reject(err);\n      else resolve(hash);\n    });\n  });\n\n  return hashedPassword;\n}\n\nexport const validateUser = (user) => {\n  const schema = {\n    avatar: Joi.any(),\n    name: Joi.string().min(2).max(30).required(),\n    username: Joi.string()\n      .min(2)\n      .max(20)\n      .regex(/^[a-zA-Z0-9_]+$/)\n      .required(),\n    password: Joi.string().min(6).max(20).allow('').allow(null),\n  };\n\n  return Joi.validate(user, schema);\n};\n\nconst User = mongoose.model('User', userSchema);\n\nexport default User;\n"],"file":"User.js"}